SELECT USER
FROM DUAL;
-- SCOTT


-- ▼ 날짜에 대한 세션 설정 변경
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';
-- Session이(가) 변경되었습니다.

-- ▼ TBL_EMP 테이블에서 입사일이 1981년 4월 2일부터 1981년 9월 28일 사이에
--    입사한 직원들의 사원명, 직종명, 입사일 항목을 조회한다.
--    (해당일 포함)
SELECT ENAME "사원명", JOB "직종명", HIREDATE "입사일"
FROM TBL_EMP
WHERE HIREDATE >= TO_DATE('1981-04-02', 'YYYY-MM-DD')
  AND HIREDATE <= TO_DATE('1981-09-28', 'YYYY-MM-DD');
/*
JONES	MANAGER	    1981-04-02
MARTIN	SALESMAN	1981-09-28
BLAKE	MANAGER	    1981-05-01
CLARK	MANAGER	    1981-06-09
TURNER	SALESMAN	1981-09-08
*/


-- ▼ BETWEEN A AND B
SELECT ENAME "사원명", JOB "직종명", HIREDATE "입사일"
FROM TBL_EMP
WHERE HIREDATE BETWEEN TO_DATE('1981-04-02', 'YYYY-MM-DD')
                   AND TO_DATE('1981-09-28', 'YYYY-MM-DD');
/*
JONES	MANAGER	    1981-04-02
MARTIN	SALESMAN	1981-09-28
BLAKE	MANAGER	    1981-05-01
CLARK	MANAGER	    1981-06-09
TURNER	SALESMAN	1981-09-08
*/

-- ▼ TBL_EMP 테이블에서 급여(SAL)가 2450에서 3000 사이의 직원들을 모두 조회한다.
SELECT *
FROM TBL_EMP
WHERE SAL BETWEEN 2450 AND 5000;
/*
7566	JONES	MANAGER	    7839	1981-04-02	2975	20
7698	BLAKE	MANAGER	    7839	1981-05-01	2850		30
7782	CLARK	MANAGER	    7839	1981-06-09	2450		10
7788	SCOTT	ANALYST	    7566	1987-07-13	3000		20
7839	KING	PRESIDENT		    1981-11-17	5000		10
7902	    FORD	ANALYST	    7566	1981-12-03	3000		20
*/

-- ▼ TBL_EMP 테이블에서 사원의 이름이
--    'C'로 시작하는 이름부터 'S'로 시작하는 이름인 경우
--    모든 항목을 조회한다.
SELECT *
FROM TBL_EMP
WHERE ENAME BETWEEN 'C' AND 'S';
/*
7566	JONES	MANAGER	    7839	1981-04-02	2975		    20
7654	MARTIN	SALESMAN	7698	1981-09-28	1250    	1400	    30
7782	CLARK	MANAGER	    7839	1981-06-09	2450		        10
7839	KING	PRESIDENT		    1981-11-17	5000		        10
7900    	JAMES	CLERK	    7698	1981-12-03	950		        30
7902	    FORD	ANALYST	    7566	1981-12-03	3000		        20
7934	MILLER	CLERK	    7782	1982-01-23	1300		        10
*/

-- ▶ 『BETWEEN A AND B』는 날짜형, 숫자형, 문자형 데이터 모두에 적용된다.
--    단, 문자형일 경우 아스키코드 순서를 따르기 때문에 (사전식 배열)
--    대문자가 앞쪽에 위치하고 소문자가 뒤쪽에 위치한다.
--    또한, 『BETWEEN A AND B』는 해당 구문이 수행되는 시점에서
--    오라클 내부적으로는 부등호 연산자의 형태로 바뀌어 연산 처리된다.

SELECT *
FROM TBL_EMP
WHERE ENAME BETWEEN 'C' AND 's';


-- ▼ ASCII()
--    매개변수로 넘겨받은 해당 문자의 아스키 코드 값을 반환한다.
SELECT ASCII('A'), ASCII('B'), ASCII('a'), ASCII('b')
FROM DUAL;
-- 65	66	97	98


SELECT ENAME, JOB, SAL
FROM TBL_EMP
WHERE JOB = 'SALESMAN'
   OR JOB = 'CLERK';

SELECT ENAME, JOB, SAL
FROM TBL_EMP
WHERE JOB IN ('SALESMAN', 'CLERK');

SELECT ENAME, JOB, SAL
FROM TBL_EMP
WHERE JOB =ANY ('SALESMAN', 'CLERK');

-- ▶ 위의 3가지 유형의 쿼리문은 모두 같은 결과를 반환한다.
--    하지만, 맨 위의 쿼리문(OR)이 가장 빠르게 처리된다. (차이가 크지 않음)
--    물론 메모리에 대한 내용이 아니라 CPU 처리에 대한 내용으로
--    이 부분까지 감안하여 쿼리문을 구성하게 되는 경우는 많지 않다.
-- ▶ 『IN』과 『=ANY』는 같은 연산자 효과를 가진다.
--    이들 모두는 내부적으로 『OR』 구조로 변경되어 연산처리 된다.


--------------------------------------------------------------------------------


DROP TABLE TBL_SAWON;
-- Table TBL_SAWON이(가) 삭제되었습니다.

PURGE RECYCLEBIN;
-- RECYCLEBIN이(가) 비워졌습니다.


-- ▼ 추가 실습 테이블 구성(TBL_SAWON)
CREATE TABLE TBL_SAWON
( SANO      NUMBER(4)
, SANAME    VARCHAR2(30)
, JUBUN     CHAR(13)
, HIREDATE  DATE         DEFAULT SYSDATE
, SAL       NUMBER(10)
);
-- Table TBL_SAWON이(가) 생성되었습니다.

SELECT *
FROM TBL_SAWON;
-- 조회 결과 없음

DESC TBL_SAWON;
/*
이름     널? 유형           
-------- -- ------------ 
SANO        NUMBER(4)    
SANAME      VARCHAR2(30) 
JUBUN       CHAR(13)     
HIREDATE    DATE         
SAL         NUMBER(10)
*/


-- ▼ 생성된 테이블에 데이터 입력(TBL_SAWON)
INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1001, '고연수', '9409252234567', TO_DATE('2005-01-03', 'YYYY-MM-DD'), 3000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1002, '김보경', '9809022234567', TO_DATE('1999-11-23', 'YYYY-MM-DD'), 2000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1003, '정미경', '9810092234567', TO_DATE('2006-08-10', 'YYYY-MM-DD'), 4000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1004, '김인교', '9307131234567', TO_DATE('1998-05-13', 'YYYY-MM-DD'), 2000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1005, '이정재', '7008161234567', TO_DATE('1998-05-13', 'YYYY-MM-DD'), 1000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1006, '아이유', '9309302234567', TO_DATE('1999-10-10', 'YYYY-MM-DD'), 3000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1007, '이하이', '0302064234567', TO_DATE('2010-10-23', 'YYYY-MM-DD'), 4000);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1008, '인순이', '6807102234567', TO_DATE('1998-03-20', 'YYYY-MM-DD'), 1500);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1009, '선동렬', '6710261234567', TO_DATE('1998-03-20', 'YYYY-MM-DD'), 1300);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1010, '선우용녀', '6511022234567', TO_DATE('1998-12-20', 'YYYY-MM-DD'), 2600);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1011, '선우선', '0506174234567', TO_DATE('2011-10-10', 'YYYY-MM-DD'), 1300);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1012, '남궁민', '0102033234567', TO_DATE('2010-10-10', 'YYYY-MM-DD'), 2400);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1013, '남진', '0210303234567', TO_DATE('2011-10-10', 'YYYY-MM-DD'), 2800);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1014, '반보영', '9903142234567', TO_DATE('2012-11-11', 'YYYY-MM-DD'), 5200);

INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE, SAL)
VALUES(1015, '한은영', '9907292234567', TO_DATE('2012-11-11', 'YYYY-MM-DD'), 5200);

-- 1 행 이(가) 삽입되었습니다. * 15


COMMIT;
-- 커밋 완료.


SELECT *
FROM TBL_SAWON;
/*
1001	    고연수	    9409252234567	2005-01-03	3000
1002	    김보경	    9809022234567	1999-11-23	2000
1003	    정미경	    9810092234567	2006-08-10	4000
1004	    김인교	    9307131234567	1998-05-13	2000
1005	    이정재	    7008161234567	1998-05-13	1000
1006	    아이유	    9309302234567	1999-10-10	3000
1007	    이하이	    0302064234567	2010-10-23	4000
1008	    인순이	    6807102234567	1998-03-20	1500
1009	    선동렬	    6710261234567	1998-03-20	1300
1010	    선우용녀	6511022234567	1998-12-20	2600
1011	    선우선	    0506174234567	2011-10-10	1300
1011	    선우선	    0506174234567	2011-10-10	1300
1012	    남궁민	    0102033234567	2010-10-10	2400
1013	    남진	    0210303234567	2011-10-10	2800
1014	    반보영	    9903142234567	2012-11-11	5200
1015	    한은영	    9907292234567	2012-11-11	5200
*/

-- ▼ TBL_SAWON 테이블에서 '고연수' 사원의 데이터를 조회한다.
SELECT *
FROM TBL_SAWON
WHERE SANAME = '고연수';
-- 1001	고연수	9409252234567	2005-01-03	3000

SELECT *
FROM TBL_SAWON
WHERE SANAME LIKE '고연수';
-- 1001	고연수	9409252234567	2005-01-03	3000
-- ▶ LIKE : (부) ~와 같이, ~처럼


-- ▼ WILD CARD(CHARACTER) → 『%』
--    『LIKE』와 함께 사용되는 『%』는 모든 글자를 의미하고,
--    『LIKE』와 함께 사용되는 『_』는 아무 글자 한 개를 의미한다.

-- ▼ TBL_SAWON 테이블에서 성씨가 『고』씨인 사원의
--    사원명, 주민번호, 급여 항목을 조회한다.
SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME = '고';
-- 조회 결과 없음

SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME = '고__';
-- 조회 결과 없음

SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '고__';
-- 고연수	9409252234567	3000

SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '고%';
-- 고연수	9409252234567	3000


-- ▼ TBL_SAWON 테이블에서 성씨가 『이』씨인 사원의
--    사원명, 주민번호, 급여 항목을 조회한다.
SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '이%';
/*
이정재	7008161234567	1000
이하이	0302064234567	4000
*/


-- ▼ TBL_SAWON 테이블에서 사원의 이름이 『영』으로 끝나는 사원의
--    사원명, 주민번호, 급여 항목을 조회한다.
SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '%영';
/*
반보영	9903142234567	5200
한은영	9907292234567	5200
*/


-- ▼ 추가 데이터 입력(TBL_SAWON)
INSERT INTO TBL_SAWON(SANO, SANAME, JUBUN, HIREDATE,SAL)
VALUES(1016, '이이경', '0605063234567', TO_DATE('2015-01-20', 'YYYY-MM-DD'), 1500);
-- 1 행 이(가) 삽입되었습니다.

-- ▼ 확인
SELECT *
FROM TBL_SAWON;

-- ▼ 커밋
COMMIT;
-- 커밋 완료.


-- ▼ TBL_SAWON 테이블에서 사원의 이름이 『이』라는 글자가
--    하나라도 포함되어 있다면 그 사원의
--    사원번호, 사원명, 급여 항목을 조회한다.
SELECT SANO, SANAME, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '%이%';
/*
1005	    이정재	1000
1006	    아이유	3000
1007	    이하이	4000
1008	    인순이	1500
1016	    이이경	1500
*/


-- ▼ TBL_SAWON 테이블에서 사원의 이름에 『이』라는 글자가 두 번 들어있는 사원의
--    사원번호, 사원명, 급여 항목을 조회한다.
SELECT SANO, SANAME, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '%이%이%';
/*
1007	    이하이	4000
1016	    이이경	1500
*/


-- ▼ TBL_SAWON 테이블에서 사원의 이름에 『이』라는 글자가
--    연속으로 두 번 들어있는 사원의
--    사원번호, 사원명, 급여 항목을 조회한다.
SELECT SANO, SANAME, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '%이이%';
-- 1016	이이경	1500


-- ▼ TBL_SAWON 테이블에서 사원 이름의 두 번째 글자가 『보』인 사원의
--    사원번호, 사원명, 급여 항목을 조회한다.
SELECT SANO, SANAME, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '_보%';
/*
1002    	김보경	2000
1014	    반보영	5200
*/


-- ▼ TBL_SAWON 테이블에서 성씨가 『선』씨인 사원의
--    사원명, 주민번호, 급여 항목을 조회한다.
SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SANAME LIKE '선__';
-- ?

-- ▶ 데이터베이스 설계 과정에서
--    성과 이름을 분리하여 처리할 업무 계획이 있다면
--    테이블에서 성 컬럼과 이름 컬럼을 분리하여 구성해야 한다.


-- ▼ TBL_SAWON 테이블에서 여직원들의
--    사원명, 주민번호, 급여 항목을 조회한다.
SELECT SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE JUBUN LIKE '______2______'
   OR JUBUN LIKE '______4______';
/*
고연수 	    9409252234567	3000
김보경	    9809022234567	2000
정미경	    9810092234567	4000
아이유	    9309302234567	3000
이하이	    0302064234567	4000
인순이	    6807102234567	1500
선우용녀	6511022234567	2600
선우선	    0506174234567	1300
반보영	    9903142234567	5200
한은영	    9907292234567	5200
*/


-- ▼ 실습 테이블 생성(TBL_WATCH)
CREATE TABLE TBL_WATCH
( WATCH_NAME    VARCHAR2(20)
, BIGO          VARCHAR2(100)
);
-- Table TBL_WATCH이(가) 생성되었습니다.

-- ▼ 데이터 입력
INSERT INTO TBL_WATCH(WATCH_NAME, BIGO)
VALUES('금시계', '순금 99.99% 함유된 최고급 시계');

INSERT INTO TBL_WATCH(WATCH_NAME, BIGO)
VALUES('은시계', '고객 만족도 99.99점을 획득한 최고의 시계');

-- 1 행 이(가) 삽입되었습니다. *2

-- ▼ 확인
SELECT *
FROM TBL_WATCH;
/*
금시계	순금 99.99% 함유된 최고급 시계
은시계	고객 만족도 99.99점을 획득한 최고의 시계
*/

-- ▼ 커밋
COMMIT;
-- 커밋 완료.


-- ▼ TBL_WATCH 테이블의 BIGO(비고) 컬럼에
-- 『99.99%』라는 글자가 포함된 행의 데이터를 조회한다.
SELECT *
FROM TBL_WATCH
WHERE BIGO LIKE '%99.99%%';
-- BIGO 컬럼의 문자열에 99.99가 포함되는 데이터
/*
금시계	순금 99.99% 함유된 최고급 시계
은시계	고객 만족도 99.99점을 획득한 최고의 시계
*/

-- ▼ ESCAPE
--    ESCAPE로 정한 문자의 다음 한 글자를 와일드 카드에서 탈출시킨다.
--    일반적으로 사용 빈도가 낮은 특수문자(특수기호)를 사용한다.
SELECT *
FROM TBL_WATCH
WHERE BIGO LIKE '%99.99\%%' ESCAPE '\';
-- 금시계	순금 99.99% 함유된 최고급 시계


--------------------------------------------------------------------------------


--■■■ COMMIT / ROLLBACK ■■■--

SELECT *
FROM TBL_DEPT;
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
*/


-- 데이터 입력
INSERT INTO TBL_DEPT VALUES(50, '개발부', '서울');
-- 1 행 이(가) 삽입되었습니다.

SELECT *
FROM TBL_DEPT;
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	개발부	    서울
*/

-- ▶ 『50번 개발부 서울』
--    이 데이터는 TBL_DEPT 테이블이 저장되어 있는
--    하드디스크상에 물리적으로 적용되어 저장된 것이 아니다.
--    메모리(RAM) 상에 입력된 것이다.


-- ▼ ROLLBACK
ROLLBACK;
-- 롤백 완료.

-- 확인
SELECT *
FROM TBL_DEPT;
-- 『50번 개발부 서울』에 대한 데이터가 소실된 것을 확인 (존재하지 않음)


-- 다시 데이터 입력
INSERT INTO TBL_DEPT VALUES(50, '개발부', '서울');
-- 1 행 이(가) 삽입되었습니다.

-- 확인
SELECT *
FROM TBL_DEPT;
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	개발부	    서울
*/

-- ▶ 『50번 개발부 서울』
--    이 데이터를 실제 하드디스크 상에 물리적으로 저장하기 위해서는
--    COMMIT을 수행해야 한다.

-- 커밋
COMMIT;
-- 커밋 완료.

-- ▼ ROLLBACK
ROLLBACK;
-- 롤백 완료.

-- 확인
SELECT *
FROM TBL_DEPT;
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	개발부	    서울
*/

-- ▶ 롤백(ROLLBACK)을 수행했음에도
--    『50번 개발부 서울』의 행 데이터는 소실되지 않았다.

-- ▶ COMMIT을 실행한 이후로 DML 구문(INSERT, UPDATE, DELETE)을 통해
--    변경된 데이터를 취소할 수 있는 것일 뿐!
--    DML 명령을 사용한 후 COMMIT을 수행하고 나서 ROLLBACK을 실행해봐야
--    아무런 소용이 없다.


-- ▼ 데이터 수정(UPDATE)
UPDATE TBL_DEPT
SET DNAME = '연구부', LOC = '경기'
WHERE DEPTNO = 50;
-- 1 행 이(가) 업데이트되었습니다.

SELECT *
FROM TBL_DEPT;
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	연구부	    경기
*/

ROLLBACK;
-- 롤백 완료.

SELECT *
FROM TBL_DEPT;
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	개발부	    서울
*/

UPDATE TBL_DEPT
SET DNAME = '연구부', LOC = '인천'
WHERE DEPTNO = 50;
-- 1 행 이(가) 업데이트되었습니다.

SELECT *
FROM TBL_DEPT;
/*
10	ACCOUNTING	NEW YORK
20	RESEARCH	DALLAS
30	SALES	    CHICAGO
40	OPERATIONS	BOSTON
50	연구부 	    인천
*/


-- ▼ 데이터 삭제(DELETE)
DELETE
FROM TBL_DEPT
WHERE DEPTNO = 50;
-- 1 행 이(가) 삭제되었습니다.

SELECT *
FROM TBL_DEPT;

ROLLBACK;

COMMIT;


--------------------------------------------------------------------------------


--■■■ ORDER BY 절 ■■■--

SELECT ENAME "사원명", DEPTNO "부서번호", JOB "직종", SAL "급여"
     , SAL*12+NVL(COMM, 0) "연봉"
FROM EMP;
/*
SMITH	20	CLERK	     800	     9600
ALLEN	30	SALESMAN	1600	    19500
WARD	30	SALESMAN	1250	    15500
JONES	20	MANAGER	    2975	35700
MARTIN	30	SALESMAN	1250	    16400
BLAKE	30	MANAGER	    2850	    34200
CLARK	10	MANAGER	    2450	    29400
SCOTT	20	ANALYST	    3000	    36000
KING	10	PRESIDENT	5000    	60000
TURNER	30	SALESMAN	1500	    18000
ADAMS	20	CLERK	    1100	    13200
JAMES	30	CLERK	     950	    11400
FORD	20	ANALYST	    3000    	36000
MILLER	10	CLERK	    1300	    15600
*/

SELECT ENAME "사원명", DEPTNO "부서번호", JOB "직종", SAL "급여"
     , SAL*12+NVL(COMM, 0) "연봉"
FROM EMP
ORDER BY DEPTNO ASC;            -- DEPTNO : 정렬 기준
                                -- ASC    : 정렬 유형(오름차순) → 생략 가능!
/*
CLARK	10	MANAGER	    2450	    29400
KING	10	PRESIDENT	5000	    60000
MILLER	10	CLERK	    1300	    15600
JONES	20	MANAGER	    2975	35700
FORD	20	ANALYST	    3000	    36000
ADAMS	20	CLERK	    1100    	13200
SMITH	20	CLERK	     800	     9600
SCOTT	20	ANALYST	    3000	    36000
WARD	30	SALESMAN	1250    	15500
TURNER	30	SALESMAN	1500	    18000
ALLEN	30	SALESMAN	1600    	19500
JAMES	30	CLERK	     950	    11400
BLAKE	30	MANAGER	    2850	    34200
MARTIN	30	SALESMAN	1250	    16400
*/

SELECT ENAME "사원명", DEPTNO "부서번호", JOB "직종", SAL "급여"
     , SAL*12+NVL(COMM, 0) "연봉"
FROM EMP
ORDER BY DEPTNO DESC;           -- DESC : 정렬 유형(내림차순) → 생략 불가!
/*
BLAKE	30	MANAGER	    2850	    34200
TURNER	30	SALESMAN	1500	    18000
ALLEN	30	SALESMAN	1600	    19500
MARTIN	30	SALESMAN	1250	    16400
WARD	30	SALESMAN	1250    	15500
JAMES	30	CLERK	     950	    11400
SCOTT	20	ANALYST	    3000	    36000
JONES	20	MANAGER	    2975	35700
SMITH	20	CLERK	     800	     9600
ADAMS	20	CLERK	    1100    	13200
FORD	20	ANALYST	    3000    	36000
KING	10	PRESIDENT	5000	    60000
MILLER	10	CLERK	    1300	    15600
CLARK	10	MANAGER	    2450    	29400
*/


SELECT ENAME "사원명", DEPTNO "부서번호", JOB "직종", SAL "급여"
     , SAL*12+NVL(COMM, 0) "연봉"
FROM EMP
ORDER BY "연봉" DESC;
/*
KING	10	PRESIDENT	5000	    60000
FORD	20	ANALYST	    3000	    36000
SCOTT	20	ANALYST	    3000	    36000
JONES	20	MANAGER	    2975	35700
BLAKE	30	MANAGER	    2850    	34200
CLARK	10	MANAGER	    2450    	29400
ALLEN	30	SALESMAN	1600	    19500
TURNER	30	SALESMAN	1500	    18000
MARTIN	30	SALESMAN	1250    	16400
MILLER	10	CLERK	    1300	    15600
WARD	30	SALESMAN	1250	    15500
ADAMS	20	CLERK	    1100	    13200
JAMES	30	CLERK	     950    	11400
SMITH	20	CLERK	     800	     9600
*/

SELECT ENAME "사원명", DEPTNO "부서번호", JOB "직종", SAL "급여"
     , SAL*12+NVL(COMM, 0) "연봉"
FROM EMP
ORDER BY 2;                     -- ▷ 부서번호 오름차순 정렬
-- ▶ EMP 테이블이 갖고 있는 테이블의 고유한 컬럼 순서가 아니다.
--    (고유 컬럼 순서에 의하면 2는 ENAME)
--    SELECT 처리 되는 두 번째 컬럼을 기준으로 정렬
--    ASC는 생략된 상태 → 오름차순 정렬
--    오라클에서의 기본 인덱스는 자바와 달리 1부터 시작
--    최종적으로... 현재 『ORDER BY 2』 구문은 『ORDER BY DEPTNO ASC』이다.


SELECT ENAME, DEPTNO, JOB, SAL
FROM EMP
ORDER BY 2, 4;
-- OBDER BY DEPTNO, SAL ASC;
-- ▷ ①부서번호, ②급여 기준 오름차순 정렬
/*
MILLER	10	CLERK	    1300
CLARK	10	MANAGER	    2450
KING	10	PRESIDENT	5000
SMITH	20	CLERK	     800
ADAMS	20	CLERK	    1100
JONES	20	MANAGER	    2975
SCOTT	20	ANALYST	    3000
FORD	20	ANALYST	    3000
JAMES	30	CLERK	     950
MARTIN	30	SALESMAN	1250
WARD	30	SALESMAN	1250
TURNER	30	SALESMAN	1500
ALLEN	30	SALESMAN	1600
BLAKE	30	MANAGER	    2850
*/


SELECT ENAME, DEPTNO, JOB, SAL
FROM EMP
ORDER BY 2, 3, 4 DESC;
-- ORDER BY DEPTNO, JOB, (SAL DESC);
-- ▷ ① DEPTNO(부서번호) 기준 오름차순 정렬
--    ② JOB(직종명) 기준 오름차순 정렬
--    ③ SAL(급여) 기준 내림차순(DESC) 정렬
/*
MILLER	10	CLERK	    1300
CLARK	10	MANAGER	    2450
KING	10	PRESIDENT	5000
SCOTT	20	ANALYST 	3000
FORD	20	ANALYST	    3000
ADAMS	20	CLERK	    1100
SMITH	20	CLERK	     800
JONES	20	MANAGER 	2975
JAMES	30	CLERK	     950
BLAKE	30	MANAGER	    2850
ALLEN	30	SALESMAN	1600
TURNER	30	SALESMAN	1500
MARTIN	30	SALESMAN	1250
WARD	30	SALESMAN	1250
*/


--------------------------------------------------------------------------------


-- ▼ CONCAT()
--    문자열 기반으로 데이터 결합을 수행하는 함수
--    오로지 2개의 문자열만 결합시킬 수 있다.
SELECT ENAME || JOB "첫번째컬럼"
     , CONCAT(ENAME, JOB) "두번째컬럼"
FROM EMP;

SELECT '우리는' || '기본을' || '지킨다' "첫번째컬럼"
     , CONCAT('우리는', '기본을', '지킨다') "두번째컬럼"
FROM DUAL;
-- 오류 발생 : ORA-00909: invalid number of arguments

SELECT ENAME || JOB || DEPTNO "첫번째컬럼"
     , CONCAT( CONCAT(ENAME, JOB), DEPTNO ) "두번째컬럼"
FROM EMP;


/*
obj.substring(n, m)
    ▷ obj 문자열의 n부터 m-1까지
*/

-- ▼ SUBSTR() 갯수 기반 / SUBSTRB() 바이트 기반
--    문자열을 추출하는 기능을 가진 함수
--    첫 번째 파라미터 값은 대상 문자열(추출의 대상, TARGET)
--    두 번째 파라미터 값은 추출을 시작하는 위치(인덱스, START) → 인덱스는 1부터 시작
--    세 번째 파라미터 값은 추출할 문자열의 갯수(갯수, COUNT) → 생략 시, 문자열의 길이 끝까지
SELECT ENAME "COL1"
     , SUBSTR(ENAME, 1, 2) "COL2"
FROM EMP;

SELECT ENAME "COL1"
     , SUBSTR(ENAME, 3, 2) "COL2"
     , SUBSTR(ENAME, 3, 5) "COL3"
     , SUBSTR(ENAME, 3) "COL4"
     , SUBSTR(ENAME, 6, 1) "COL5"
FROM EMP;
/*
SMITH	IT	ITH	    ITH	
ALLEN	LE	LEN	    LEN	
WARD	RD	RD	    RD	
JONES	NE	NES	    NES	
MARTIN	RT	RTIN	RTIN	N
BLAKE	AK	AKE	    AKE	
CLARK	AR	ARK	    ARK	
SCOTT	OT	OTT	    OTT	
KING	NG	NG	    NG	
TURNER	RN	RNER	RNER	R
ADAMS	AM	AMS	    AMS	
JAMES	ME	MES	    MES	
FORD	RD	RD	    RD	
MILLER	LL	LLER	LLER	R
*/

-- ▼ TBL-SAWON 테이블에서 성별이 남성인 사원만
--    사원번호, 사원명, 주민번호, 급여 항목을 조회한다.
--    단, SUBSTR() 함수를 활용하여 처리할 수 있도록 한다.
SELECT SANO, SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SUBSTR(JUBUN, 7, 1) = '1'
   OR SUBSTR(JUBUN, 7, 1) = '3';

SELECT SANO, SANAME, JUBUN, SAL
FROM TBL_SAWON
WHERE SUBSTR(JUBUN, 7, 1) IN ('1', '3');
   
-- ▶ SUBSTR()으로 추출한 문자를 『''』없이 표기하지 않도록 주의!
/*
1004	    김인교	9307131234567	2000
1005    	이정재	7008161234567	1000
1009	    선동렬	6710261234567	1300
1012	    남궁민	0102033234567	2400
1013	    남진	0210303234567	2800
1016    	이이경	0605063234567	1500
*/


-- ▼ LENGTH() 글자 수 / LENGTHB() 바이트 수
SELECT ENAME "COL1"
     , LENGTH(ENAME) "COL2"
     , LENGTHB(ENAME) "COL3"
FROM EMP;
/*
SMITH	5	5
ALLEN	5	5
WARD	4	4
JONES	5	5
MARTIN	6	6
BLAKE	5	5
CLARK	5	5
SCOTT	5	5
KING	4	4
TURNER	6	6
ADAMS	5	5
JAMES	5	5
FORD	4	4
MILLER	6	6
*/


-- ▼ INSTR()
--    첫 번째 파라미터 값은 대상 문자열 (TARGET)
--    두 번째 파라미터 값은 찾아야 할 문자열
--    세 번째 파라미터 값은 스캔을 시작하는 위치
--    네 번째 파라미터 값은 몇 번째 등장한 위치를 반환할 것인지에 대한 설정 (→ 1은 생략 가능)
SELECT 'ORACLE ORAHOME BIORA' "COL1"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 1, 1) "COL2"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 1, 2) "COL3"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 2, 1) "COL4"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 2) "COL5"
     , INSTR('ORACLE ORAHOME BIORA', 'ORA', 2, 3) "COL6"
FROM DUAL;
-- ORACLE ORAHOME BIORA	1	8	8	8	0

SELECT '나의오라클 집으로오라 합니다.' "COL1"
     , INSTR('나의오라클 집으로오라 합니다.', '오라', 1) "COL2"
     , INSTR('나의오라클 집으로오라 합니다.', '오라', 2) "COL3"
     , INSTR('나의오라클 집으로오라 합니다.', '오라', 10) "COL4"
     , INSTR('나의오라클 집으로오라 합니다.', '오라', 11) "COL5"
FROM DUAL;
-- 마지막 파라미터 값을 생략한 형태로 사용 → 마지막 파라미터 : 1
-- 나의오라클 집으로오라 합니다.	3	3	10	0


-- ▼ REVERSE()
--    대상 문자열을 거꾸로 반환한다.
--    단, 한글은 불가 (1byte 단위로 끊어서 뒤집는 방식이기 때문)
SELECT 'ORACLE' "COL1"
     , REVERSE('ORACLE') "COL2"
     , REVERSE('오라클') "COL3"
FROM DUAL;
-- ORACLE	ELCARO  ???


-- ▼ 실습 테이블 생성(TBL_FILES)
CREATE TABLE TBL_FILES
( FILENO    NUMBER(3)
, FILENAME  VARCHAR2(100)
);
-- Table TBL_FILES이(가) 생성되었습니다.

-- 데이터 입력(TBL_FILES)
INSERT INTO TBL_FILES VALUES(1, 'C:\AAA\BBB\CCC\SALES.DOC');
INSERT INTO TBL_FILES VALUES(2, 'C:\AAA\PANMAE.XXLS');
INSERT INTO TBL_FILES VALUES(3, 'D:\RESEARCH.PPT');
INSERT INTO TBL_FILES VALUES(4, 'C:\DOCUMENTS\STUDY.HWP');
INSERT INTO TBL_FILES VALUES(5, 'C:\DOCUMENTS\TEMP\HOMEWORK\SQL.TXT');
INSERT INTO TBL_FILES VALUES(6, 'C:\SHARE\F\TEST\FLOWER.PNG');
INSERT INTO TBL_FILES VALUES(7, 'E:\STUDY\ORACLE\20220816_01_SCOTT.SQL');
-- 1 행 이(가) 삽입되었습니다. * 7

-- 확인
SELECT *
FROM TBL_FILES;
/*
1	C:\AAA\BBB\CCC\SALES.DOC
2	C:\AAA\PANMAE.XXLS
3	D:\RESEARCH.PPT
4	C:\DOCUMENTS\STUDY.HWP
5	C:\DOCUMENTS\TEMP\HOMEWORK\SQL.TXT
6	C:\SHARE\F\TEST\FLOWER.PNG
7	E:\STUDY\ORACLE\20220816_01_SCOTT.SQL
*/

-- 커밋
COMMIT;
-- 커밋 완료.

SELECT FILENO "파일번호"
     , FILENAME "파일명"
FROM TBL_FILES;
/*
1	C:\AAA\BBB\CCC\SALES.DOC
2	C:\AAA\PANMAE.XXLS
3	D:\RESEARCH.PPT
4	C:\DOCUMENTS\STUDY.HWP
5	C:\DOCUMENTS\TEMP\HOMEWORK\SQL.TXT
6	C:\SHARE\F\TEST\FLOWER.PNG
7	E:\STUDY\ORACLE\20220816_01_SCOTT.SQL
*/


-- TBL_FILES 테이블을 조회하여
-- 다음과 같은 결과를 얻을 수 있도록 쿼리문을 구성한다.
/*
---------   ----------------------
 파일번호   파일명
---------   ----------------------
        1	SALES.DOC
        2	PANMAE.XXLS
        3	RESEARCH.PPT
        4	STUDY.HWP
        5	SQL.TXT
        6	FLOWER.PNG
        7	20220816_01_SCOTT.SQL
---------   ----------------------
*/
SELECT FILENO "파일번호"
     , SUBSTR(FILENAME, LENGTH(FILENAME) - INSTR(REVERSE(FILENAME), '\', 1) + 2) "파일명"
FROM TBL_FILES;
/*
1	SALES.DOC
2	PANMAE.XXLS
3	RESEARCH.PPT
4	STUDY.HWP
5	SQL.TXT
6	FLOWER.PNG
7	20220816_01_SCOTT.SQL
*/










